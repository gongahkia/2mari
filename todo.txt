x (A) use web speech api for real-time transcription using the speechrecognition interface since it doesn't require external services or any api key
x (A) consider the alternative of vosk: this is an offline open-source speech recognition toolkit that doesn't require an api key, it supports multiple languages and can be used for continuous large vocabulary transcription.
x (A) consider the alternative of mozilla deepspeech: an open-source speech-to-text engine that can be used without an api key, it's highly customizable and can be trained on specific datasets.
x (A) consider the alternative of openai whisper: while it's primarily designed for offline use, whisper is a powerful open-source model that provides high accuracy and resilience to background noise, you can implement it in your application without needing an api key.
x (A) or consider placing the below within next.config.ts to just silence console errors outright

(A) add detailed logic and more specific santisaion operations under sanitise.ts where it indiscriminately removes all content after or in between a predetermined but extensive list of fluff words, then it outputs the remaining words left (rule-based reduction first) this is done by default
(A) continue existing chat with v0 under 2mari webapp requirements and continue adding features per the rules to automatically simplify first, then the subsequent logic for word2vec simplfications 
(A) then ask v0 to add boxes underneath the first 2 that show simplified text and even more simplified text and then a bottom left box that states "general topic" and a bottom right box that states "general emotion"
(A) automate the word2vec embeedings within another file annd have them render the details of the other 4 boxes similar to the existing sanitised text
(A) implement the simplification with word2vec embeddings and the below simplfication algorithm in another file called "simplify.ts"
(A) tokenize the input text into words;; for each word, find its closest neighbors in the word2vec space;; replace the word with its simplest neighbor (determined by word frequency or a pre-defined list of simple words) ;; repeat this process for each click of the "simplify" button and also handle sentence structure with rule-based reduction (can ask gpt what available rule-based ways there are to simplify senntence structure semantically and gramatically correctly eg. remove surbodinate clauses) and add a stopping condition
(A) if the word2vec doesn't work, then handle it through API calls 
(A) consider adding a copy button below the summarised text
(A) add another text-to-speech that reads out the finalised content 

(A) add a gui visualisation similar to a git graph reflecting the gradual simplification of teh text from the original to the final text
(A) also allow users to input a paragraph instead if they dont want to use the tts option

(B) actually deploy the site as a usable webapp to vercel
(B) include an architecture diagram in the readme.md
(B) make the readme.md more detailed and include a legal disclaimer as required
(B) specify that only some browsers are currently supported like chrome and microsoft edge due to the existence of the web speech API